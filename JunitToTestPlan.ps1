# File: JunitToTestPlan.ps1
# Author: Simone Medas
# Date: 2024-11-12
# Description: Powershell script to link Postman Test result to Test Plan.
# Arguments:
#   -confFile: the file containing config to interact with DevOps (in Cloud -Azure - or On Prem - TFS)
#   -testPlanId: the Test Plan Id (you can get it looking at the TestPlan Url)
#   -buildId: the build id generated by build pipeline.
#   -buildDefinitionId: the pipeline definition (instead of BuildId) to automatic get the latest.
#   -junitReportFile: junit.xml file where test result are in.
#   -adoPat: Personal Access Token to use Azure DevOps API.
#
# *******************************************************
#   About JUnit report XML and ADO structure
# *******************************************************
#   It is necessary to distinguish the nomenclatures used differently,
#   in the JUNIT report each sub-node of the root tag "testsuites" is a "testsuite" and corresponds,
#   in ADO, to a set of Test suites folders/subfolders and the specific Test Case.
#   
#   JUnit XML report example:
#
#   <?xml version="1.0" encoding="UTF-8"?>
#       <testsuites name="1810-MemberService" tests="9" time="31.989">
#           <testsuite name="9358 : GET /api/membership/v1/contact - Sprint 36 / Sub TS/1 / Search Contact" id="..." timestamp="2024-10-23T06:18:16.128Z" tests="1" failures="0" errors="0" time="4.714">
#               <testcase name="Search Contact by Member GUID - OK" time="4.714" classname="...."/>
#       </testsuite>
#       <testsuite name="9358 : GET /api/membership/v1/contact - Sprint 36 / Sub TS/2 / Search Contact" id="..." timestamp="2024-10-23T06:18:16.128Z" tests="1" failures="0" errors="0" time="0.282">
#           <testcase name="Search Contact by Member GUID - OK" time="0.282" classname="...."/>
#       </testsuite>
#       ...
#
#   1) each <testsuite> xml node is a set of Test suites folders/subfolders + the Test Case.
#       1.a) folder, subfolder and test case are separated by the character sequence " / " (space-slash-space)
#       1.b) the last part of this path represents, in ADO, the Test Case, while the previous parts are the folders 
#       and subfolders of the Test Suites to which the Test Case belongs
#   2) The <testsuite> xml node contains one or more <testcase> nodes that represent the Asserts on the specific ADO Test Cases.
#       1.a) all the tool has to do is take the outcome of the <testcase> node and use it to update the results.
#
param (
    [Parameter(Mandatory = $true)]
    $confFile = "conf-azure.json",
    
    [Parameter(Mandatory = $true)]
    $testPlanId,

    [Parameter(Mandatory = $false)]    
    $buildId = $null,
    
    [Parameter(Mandatory = $false)]    
    $buildDefinitionId = $null,

    [Parameter(Mandatory = $true)]    
    $junitReportFile,

    [Parameter(Mandatory = $false)]
    $adoPat = $null
)

begin {
    . .\DevOpsApi.ps1

    $adoTs = @{
        id = $null
        name = $null
    } | ConvertTo-Json -Depth 10;
    
    $adoExistingTestCases = $null;
    # time when test started
    $juGlobalStart = $null
    # time when test end
    $juGlobalEnd = $null

    # contains the TestCase Result array to send at the end, for Test Run update.
    $testResults = New-Object System.Collections.ArrayList
    # contains the TestPoint for each handled test case
    $testPoints = New-Object System.Collections.ArrayList

    # load configuration from external json file and load a new AzureDevOpsClient from this
    $conf = Get-Content $confFile | ConvertFrom-Json
    if(![string]::IsNullOrEmpty($adoPat)){
        $conf.PAT = $adoPat;
    }    
    if([string]::IsNullOrEmpty($conf.PAT)){
        throw "No Azure DevOps Personal Access Token set (check the command arguments)!"
    }

    $devops = [AzureDevOpsClient]::Create($conf);    

    $scriptpath = $MyInvocation.MyCommand.Path
    $dir = Split-Path $scriptpath
    Write-host "My directory is $dir"
    Set-Location $dir
    "***************************************************"
    " Start Junit TO TestPlan                           "
    "***************************************************"    

    if($null -eq $buildId -and $null -eq $buildDefinitionId ) {
        throw "It is mandatory to specify -buildId or -buildDefinitionId parameter!"
    }

    if($null -eq $buildId) {
        $buildDefinition = $devops.GetLatestBuildInfo($buildDefinitionId);

        # Gets the latest build details        
        $buildId = $buildDefinition.id;

        Write-Output "The build used will be: $buildId $($buildDefinition.buildNumber) - status: $($buildDefinition.result)";
    }

    # get the BuildInfo current Run from given BuildId (got by $(Build.BuildId) after run PublishTestResults@2 Task)
    # get build info
    $daoBuildInfo = $devops.GetBuildInfo($buildId);

    # test plan info
    $daoTestPlanInfo = $devops.GetTestPlan($testPlanId);
    if($null -eq $daoTestPlanInfo) {
        throw "No Test Plan found with id '$testPlanId'!"
    }

    # get the JunitReport XML file
    $junitXml = [xml](Get-Content -Path $junitReportFile -Encoding UTF8);

    # <testsuite> root xml node
    $juRootTestSuites = $junitXml.GetElementsByTagName("testsuites");
    if($null -eq $juRootTestSuites -or $juRootTestSuites.Count -eq 0)
    {
        throw "The specified report file does not contain any results."
    }

    # to iterate on the <testsuite> xml node collection
    $juTestSuites = $junitXml.GetElementsByTagName('testsuite');
    if($null -eq $juTestSuites -or $juTestSuites.Count -eq 0)
    {
        throw "The specified report file does not contain any results."
    }

    # get TestSuite (root) info from DevOps
    $adoRootTestSuiteName = $junitXml.GetElementsByTagName("testsuites").name;
    Write-Output "Going to link TestSuite $adoRootTestSuiteName"

    $juFirstTestSuite = $juTestSuites.Item(0);
    # assign the global start and end
    $juGlobalStart = [datetime]::Parse($juFirstTestSuite.timestamp);
    $juGlobalEnd = $juGlobalStart.AddSeconds($junitXml.testsuites.time);
    
    $testSuites = $devops.GetTestSuitesByTestPlanId($testPlanId);
    if( $testSuites.count -eq 0 ) {
        Write-Error "No Test Suites found in the TestPlan."
        exit(0);
    }
    
    foreach($juTs in $juTestSuites)
    {
        # each <testsuite> is a composed string like as: [TestSuite Folder] / ... / [TestCase]
        # eg: "9358 : GET /api/membership/v1/contact - Testing - Sprint 36 / Sub TS/1 / Search Contact by Member GUID"
        # so: each Test Suite folder & Subfolder & Test Case are separated by " / " (space-slash-space)

        # compute test execution time
        $juTestStart = [datetime]::Parse($juTs.timestamp);
        $juTestEnd = [datetime] $juTestStart.AddSeconds($juTs.time);

        # creates a list of substrings from the main text by separating the substrings with the character sequence "space, slash, space"
        $juTestSuiteTree = $juTs.name -split " / "
        
        # starting from the root node (<testsuites>.name) go through all the leaf nodes 
        # except the last one, which is not a folder but a test case
        $parentSuiteId = $devops.GetTestSuiteByParentSuiteId($testSuites, $null, $adoRootTestSuiteName).id;
        if($null -eq $parentSuiteId) {
            Write-Warning "Test Suite not found with name: $adoRootTestSuiteName";
            #Exit 1;
        }

        foreach($juTestSuiteSubfolder in $juTestSuiteTree[0..($juTestSuiteTree.Length - 2)])
        {
            $testSuiteFolder = $devops.GetTestSuiteByParentSuiteId($testSuites, $parentSuiteId, $juTestSuiteSubfolder);
            if ($null -eq $testSuiteFolder) {
                Write-Warning "Test suite not found at path: $($juTs.name)";
                $parentSuiteId = $null;
                break;
            }
            else {
                $parentSuiteId = $testSuiteFolder.id;
            }
        }

        # if last leaf test suite node found
        if($null -ne $parentSuiteId) {
            # get ADO test cases child of given Test Suite
            $adoExistingTestCases = $devops.GetTestCases($testPlanId, $parentSuiteId); 
            
            # if( $null -eq $adoExistingTestCases -or $adoExistingTestCases.count -eq 0 ) {
            #     Write-Error "No Test cases found Test Suite tree path: $($juTs.name)";
            #     break;
            # }            

            # get the Test Case from the JUnit XML, on the last item on the Path tree
            $juTestCaseName = $juTestSuiteTree[$juTestSuiteTree.Length - 1];

            #[TestSubResult[]] $subResults
            $subResults = [System.Collections.ArrayList]::new();

            # get the folder Test Cases
            $juTestCases = $juTs.GetElementsByTagName("testcase");      

            $hasFailed = $false;

            # loop throught JUINT testcases (actually are Asserts, in Postman)
            foreach($juTcase in $juTestCases){
                $theAssertName = $juTcase.name;
                $hasFailed = If ($null -ne $juTcase.failure) { $true } Else { $false };
                if($hasFailed) {

                    $subResultItem = [TestSubResult]::new();

                    $subResultItem.id = ($subResults.Count + 1);
                    $subResultItem.displayName = $theAssertName;

                    # this test case has failed so exit and report it as FAIL
                    $subResultItem.errorMessage = $juTcase.failure.message;

                    # get the whole text from all childnodes
                    $failureContent = $juTcase.failure.InnerXml

                    # removes CDATA tags and concats
                    $subResultItem.stackTrace = $failureContent.Replace("<![CDATA[", "").Replace("]]>", "`n");
                    $subResultItem.outcome = [TestResultOutcome]::Failed.ToString();
                    $idx = $subResults.Add($subResultItem);
                }
            }
            
            $adoTestCase = $null;
            # search if this TestCase already exist and get the Id        
            foreach($adoTc in $adoExistingTestCases.value) {
                if($adoTc.workItem.name -eq $juTestCaseName) {
                    $adoTestCase = $adoTc.workItem;
                    break;
                }
            }

            # if already not exist create it and get the Id
            if($null -eq $adoTestCase) {                
                try {
                    $testCase = $devops.CreateTestCase($testPlanId, 
                        $parentSuiteId, 
                        $juTestCaseName, 
                        $juTestCaseName);
                }
                catch {
                    Write-Warning "Test Case '$juTestCaseName' wasn't created! Caused by: $($_.Exception.Message)";
                    continue;
                }

                if($null -ne $testCase -and $testCase.value.Count -ne 0){
                    $adoTestCase = $testCase.value[0].workItem;
                }            
                else {
                    Write-Warning "Test Case '$juTestCaseName' wasn't created!";
                    continue;
                }
            }

            # get test point for given TestCase
            $testPoint = $devops.GetTestPointByTestCase($testPlanId, $parentSuiteId, $adoTestCase.id);
            if($null -eq $testPoint -Or $testPoint.count -eq 0) {            
                Write-Error "No TestPoint found for Test Case '$juTestCaseName'!";
                continue;
            }
        
            $testPointId = $testPoint.value[0].id;        
            $idx = $testPoints.Add($testPointId);

            # from here we can can make the job to link run and the test plans
            $id = ($testResults.Count + 100000);

            if($hasFailed) {                
                $idx = $testResults.Add($devops.GetFailedTestResultItemWithSubResults($id, $testPoint.value[0], $adoTestCase, $daoBuildInfo,  $juTestStart, $juTestEnd, $theAssertName, $subResults))
            }
            else {
                $idx = $testResults.Add($devops.GetPassedTestResultItem($id, $testPoint.value[0], $adoTestCase, $daoBuildInfo,  $juTestStart, $juTestEnd, $theAssertName))
            }        

            Write-Output "TestCase '$juTestCaseName' result updated - in RunId: $($adoRun.id)";            

        }
    }

    if($testResults.Count -gt 0) {
        # to link run and the test plans
        # 1) Start a new Run in the Specific TestPlan
        # 2) Update Results (done in specific test case)

        # Starting a new Run in the Specific TestPlan 
        # finally we get the TestPoint for given TestCase

        $adoRun = $devops.CreateTestRunInTestPlan($testPlanId, $junitXml.testsuites.name, $testPoints, $daoBuildInfo, $juGlobalStart);  

        # 2) Update results
        $updateResults = $devops.UpdateTestResults($adoRun.id, $testResults);        

        # 3) complete run.
        #Start-Sleep -Seconds 10
        $setRunAsCompleted = $devops.UpdateTestRun($adoRun.id, $daoBuildInfo)
        
        Write-Output "";
        Write-Output "-------------------------";
        Write-Output "Test Results Updated";
        Write-Output "";
        Write-Output "RunId: $($setRunAsCompleted.id), BuildId: $($setRunAsCompleted.build.id), PlanId: $($setRunAsCompleted.plan.id)";
        Write-Output "Total Tests: $($setRunAsCompleted.totalTests), Passed: $($setRunAsCompleted.passedTests), PlanId: $($setRunAsCompleted.plan.id)";
        Write-Output "Run Url: $($setRunAsCompleted.webAccessUrl)";
        Write-Output "";
        Write-Output "Job completed";
        Write-Output "-------------------------";

        # RunId variable output for pipeline
        Write-Host "##vso[task.setvariable variable=RunId;isOutput=true]$($adoRun.id)";
    }
    else {
        Write-Warning "No TestCase verified";
        Exit 1;        
    }
}
